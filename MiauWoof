getgenv().keys = {
    'SyrexHubv2-1824SDFNAci',
    'SyrexHubv2-3680dslaVCr',
    'SyrexHubv2-3460SAaskzx',
    'SyrexHubv2-2042CAXpzpA',
    'SyrexHubv2-3612DdhgMSD',
    'SyrexHubv2-2748ADjcasf',
    'SyrexHubv2-8490cASKnfa',
    'SyrexHubv2-6913KFsASpx',
    'SyrexHubv2-2362SDFMOSZ',
    'SyrexHubv2-6388ADNiAXO',
    'SyrexHubv2-4858aLeoLdS',
    'SyrexHubv2-2580FKSgemW',
    'SyrexHubv2-8383SrTrVCs',
    'SyrexHubv2-1920OAcZXiw',
    'SyrexHubv2-7492DAFmlzx',
    'SyrexHubv2-1390cAoxzpA',
    'SyrexHubv2-8967XLaFwen',
    'SyrexHubv2-5473FPdozxw',
    'SyrexHubv2-3790LAxofap',
    'SyrexHubv2-8967XLaFwen',
    'SyrexHubv2-2195ASofbBp',
    'SyrexHubv2-2398DVXkzxf',
    'SyrexHubv2-2359XXlfDpd',
    'SyrexHubv2-2639XZpxssO',
    'SyrexHubv2-2690XzxkASp',
    'SyrexHubv2-4937AZosPAf',
    'SyrexHubv2-2740XZopdfD',
    'SyrexHubv2-4790DodfSpa',
    'SyrexHubv2-1390cAoxzpA',
    'SyrexHubv2-1920OAcZXiw',
    'SyrexHubv2-2369xCOapwf',
    'SyrexHubv2-2970COjxzid',
    'SyrexHubv2-4794XAfjozS',
    'SyrexHubv2-2969ZXojfap',
    'SyrexHubv2-6496JMFSDOF',
    'SyrexHubv2-4589SKFDANz',
    'SyrexHubv2-2369XCFlspA',
    'SyrexHubv2-0234SAMzxpd',
    'SyrexHubv2-2359ASDGnkz',
    'SyrexHubv2-2369Xmlzxop',
    'SyrexHubv2-1235SADNsal',
    'SyrexHubv2-2901MAlzoap',
    'SyrexHubv2-2690XLmasoz',
    'SyrexHubv2-6139AXOzoxc',
    'SyrexHubv2-1234abchdef',
    'SyrexHubv2-5678ijklmno',
    'SyrexHubv2-9012qrstuvw',
    'SyrexHubv2-3456yzabcdg',
    'SyrexHubv2-7890efghijk',
    'SyrexHubv2-2345mnopqrs',
    'SyrexHubv2-6789uvwxabc',
    'SyrexHubv2-0123efghijk',
    'SyrexHubv2-4567mnopqrs',
    'SyrexHubv2-8901uvwxabc',
    'SyrexHubv2-7345wASDGSx',
    'SyrexHubv2-6793WFGASzx',
    'SyrexHubv2-2356XZwZxZA',
    'SyrexHubv2-4367XfreuyX',
    'SyrexHubv2-4583HRADLmz',
    'SyrexHubv2-3457DfmdosA',
    'SyrexHubv2-34235psIzxn',
    'SyrexHubv2-3475Hrpasdi',
    'SyrexHubv2-2356jdeIIHS'
}

getgenv().validKey = true

for _, key in ipairs(getgenv().keys) do
    if key == getgenv().key then
        getgenv().validKey = true
        break
    end
end

-- anti afk

wait(0.5)

local bb = game:GetService("VirtualUser")
game:GetService("Players").LocalPlayer.Idled:Connect(function()
    bb:CaptureController()
    bb:ClickButton2(Vector2.new())
end)


getgenv().MessageBox = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/NotificationGUI/main/source.lua"))()

if getgenv().validKey then
    getgenv().MessageBox.Show({MessageBoxButtons = "OK", Description = "Your Key Was Valid!", Text = "Key System v1 | ⚠️Sharing Key = HWID BANNED⚠️"})
else
    getgenv().MessageBox.Show({MessageBoxButtons = "OK", Description = "Your Key Was Invalid!", Text = "Key System v1"})
return
end

local config = {
    placeId = 8737899170,
    eventName = "Gingerbread",
    servers = {
        count = 100,
        sort = "Desc",
        pageDeep = math.random(2, 6),
    },
    delays = {
        beforeExecute = 0.2,
        beforeBreak = 1.5,
        afterBreak = 2.4,
        hit = 0.03,
        lootbag = 0.03,
        beforeTp = 2,
        whileError = 5,
    },
}

getgenv().config = getgenv().config or config

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local TeleportService = game:GetService("TeleportService")

repeat
    task.wait()
until game.PlaceId ~= nil

if not game:IsLoaded() then
    game.Loaded:Wait()
end

task.wait(config.delays.beforeExecute)

if game.PlaceId ~= config.placeId then
    print("Gingerbread hunter unloaded, unknown place.")
    return
end

local Library = require(ReplicatedStorage:WaitForChild("Library", 2000))

repeat
    task.wait()
until Library.Loaded ~= false

local RandomEventCmds = Library.RandomEventCmds
local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character
local Humanoid = Character:WaitForChild("Humanoid", 1000)
local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart", 1000)

print(HttpService:JSONEncode(config))

function tpToPos(cframe)
    HumanoidRootPart.CFrame = CFrame.new(cframe)
end

-- Rest of your existing script...

function jumpToServer()
    local sfUrl = "https://games.roblox.com/v1/games/%s/servers/Public?sortOrder=%s&limit=%s&excludeFullGames=true"
    local req = request({ Url = string.format(sfUrl, config.placeId, config.servers.sort, config.servers.count) })
    local body = HttpService:JSONDecode(req.Body)

    if config.servers.pageDeep > 1 then
        for i = 1, config.servers.pageDeep, 1 do
            req = request({
                Url = string.format(
                    sfUrl .. "&cursor=" .. body.nextPageCursor,
                    config.placeId,
                    config.servers.sort,
                    config.servers.count
                ),
            })
            body = HttpService:JSONDecode(req.Body)
            task.wait(0.1)
        end
    end

    local servers = {}
    if body and body.data then
        for i, v in next, body.data do
            if type(v) == "table" then
                table.insert(servers, 1, v.id)
            end
        end
    end

    local randomCount = #servers
    if not randomCount then
        randomCount = 2
    end

    TeleportService:TeleportToPlaceInstance(config.placeId, servers[math.random(1, randomCount)], Players.LocalPlayer)
end

Library.Alert.Message("Finding Gingerbread...")

local activeEvents = RandomEventCmds.GetActive() or RandomEventCmds.GetActive()
local isGingerbreadExist = false

task.wait(config.delays.beforeExecute)

for eventId, event in activeEvents do
    if event.name == config.eventName then
        isGingerbreadExist = true
        tpToPos(event.origin + Vector3.new(0, 18, 0))
    end
end

-- Rest of your existing script...

-- lootbags listener
Library.Things:FindFirstChild("Lootbags").ChildAdded:Connect(function(lootbag)
    task.wait()
    if lootbag then
        game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Lootbags_Claim"):FireServer(unpack({ [1] = { [1] = lootbag.Name, }, }))
    end
end)

-- Simple method to collect lootbags
function CollectAllLootbags()
    pcall(function()
        for _, lootbag in pairs(Library.Things:FindFirstChild("Lootbags"):GetChildren()) do
            if lootbag and not lootbag:GetAttribute("Collected") then
                game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Lootbags_Claim"):FireServer(unpack({ [1] = { [1] = lootbag.Name, }, }))
                task.wait(config.delays.lootbag)
            end
        end
    end)
end

-- Function to find Gingerbread
function findGingerbread()
    for index, breakable in pairs(Library.Things.Breakables:GetChildren()) do
        if breakable.ClassName == "Model" and breakable:GetAttribute("BreakableID") == config.eventName then
            return breakable
        end
    end
end

if isGingerbreadExist then
    Library.Alert.Message("Gingerbread exists!")
    -- TODO: task.wait(config.delays.beforeBreak)

    -- Find gingerbread breakable
    local findedGingerbread = nil
    for i = 1, 5, 1 do
        findedGingerbread = findGingerbread()
        if findedGingerbread then
            tpToPos(findedGingerbread.PrimaryPart.Position + Vector3.new(0, 18, 0))
            break
        else
            task.wait(0.5)
        end
    end

    if findedGingerbread then
        Library.Alert.Message("Start breaking!")
        while Library.Things.Breakables:FindFirstChild(findedGingerbread.Name) do
            setfpscap(60)
            local args = { [1] = findedGingerbread.Name, }
            game:GetService("ReplicatedStorage"):WaitForChild("Network"):WaitForChild("Breakables_PlayerDealDamage"):FireServer(unpack(args))
            task.wait(config.delays.hit)
        end
        Library.Alert.Message("Broke!")
        findedGingerbread = false
    end

    CollectAllLootbags()
    task.wait(config.delays.afterBreak)
    CollectAllLootbags()
    task.wait(config.delays.afterBreak)
else
    Library.Alert.Message("Gingerbread not found")
end

TeleportService.TeleportInitFailed:Connect(function(player, resultEnum, msg)
    print(string.format("server: teleport %s failed, resultEnum:%s, msg:%s", player.Name, tostring(resultEnum), msg))
    config.servers.pageDeep += 1
    Library.Alert.Message("Tp Retry... :" .. msg)
    task.wait(config.delays.whileError)
    jumpToServer()
end)

task.wait(config.delays.beforeTp)
Library.Alert.Message("Tp to another server...")
jumpToServer()
